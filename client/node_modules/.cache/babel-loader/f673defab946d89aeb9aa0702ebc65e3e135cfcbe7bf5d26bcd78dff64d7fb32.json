{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\tictactoe\\\\client\\\\src\\\\pages\\\\Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport Board from '../components/Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst Game = _ref => {\n  _s();\n  let {\n    name,\n    gameId\n  } = _ref;\n  const SERVER_ENDPOINT = 'http://localhost:5001';\n  const [winner, setWinner] = useState(null);\n  const [player, setPlayer] = useState({});\n  const [game, setGame] = useState({});\n  const [notification, setNotification] = useState([]);\n  useEffect(() => {\n    const event = gameId ? 'joinGame' : 'createGame';\n    socket = new io(SERVER_ENDPOINT);\n    socket.emit(event, {\n      name,\n      gameId\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [SERVER_ENDPOINT, gameId, name]);\n  useEffect(() => {\n    socket.on('notification', data => {\n      const {\n        message = ''\n      } = data;\n      notification.push(message);\n      setNotification([...notification]);\n    });\n  }, [notification]);\n  useEffect(() => {\n    socket.on('playerCreated', data => {\n      const {\n        player\n      } = data;\n      setPlayer(player);\n    });\n    socket.on('gameUpdated', data => {\n      const {\n        game\n      } = data;\n      setGame(game);\n    });\n    socket.on('gameEnd', data => {\n      const {\n        winner\n      } = data;\n      setWinner(winner);\n    });\n  });\n  const onSquareClick = value => {\n    socket.emit('moveMade', {\n      square: value,\n      player,\n      gameId: game.id\n    });\n  };\n  const getWinnerMessage = () => {\n    return winner.player.id === player.id ? 'You Win' : 'You Loose';\n  };\n  const turnMessage = game.playerTurn === player.id ? 'Your Move' : 'Opponunt Turn';\n  const winnerMessage = winner ? getWinnerMessage() : 'Draw game';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [player && /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"Welcome \", player.name, \".\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"You are playing \", player.symbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this), game.status === 'playing' && /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: turnMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 43\n    }, this), game && /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"Game ID: \", game.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 22\n    }, this), game.status === 'gameOver' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info\",\n      children: winnerMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      player: player,\n      game: game,\n      onSquareClick: onSquareClick,\n      winner: winner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), notification.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: msg\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"kS7nMH7qfgIylu+XF4NsYtnYhiQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","io","Board","socket","Game","name","gameId","SERVER_ENDPOINT","winner","setWinner","player","setPlayer","game","setGame","notification","setNotification","event","emit","off","on","data","message","push","onSquareClick","value","square","id","getWinnerMessage","turnMessage","playerTurn","winnerMessage","symbol","status","map","msg","index"],"sources":["C:/Users/nemes/tictactoe/client/src/pages/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Board from '../components/Board';\r\n\r\nlet socket;\r\n\r\nconst Game = ({ name, gameId }) => {\r\n    const SERVER_ENDPOINT = 'http://localhost:5001';\r\n    const [winner, setWinner] = useState(null);\r\n    const [player, setPlayer] = useState({});\r\n    const [game, setGame] = useState({});\r\n    const [notification, setNotification] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const event = gameId ? 'joinGame' : 'createGame';\r\n        socket = new io(SERVER_ENDPOINT);\r\n        socket.emit(event, { name, gameId });\r\n\r\n        return () => {\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n        };\r\n    }, [SERVER_ENDPOINT, gameId, name]);\r\n\r\n    useEffect(() => {\r\n        socket.on('notification', data => {\r\n            const { message = '' } = data;\r\n            notification.push(message);\r\n            setNotification([...notification]);\r\n        });\r\n    }, [notification]);\r\n\r\n    useEffect(() => {\r\n        socket.on('playerCreated', data => {\r\n            const { player } = data;\r\n            setPlayer(player);\r\n        });\r\n\r\n        socket.on('gameUpdated', data => {\r\n            const { game } = data;\r\n            setGame(game);\r\n        });\r\n\r\n        socket.on('gameEnd', data => {\r\n            const { winner } = data;\r\n            setWinner(winner);\r\n        });\r\n    });\r\n\r\n    const onSquareClick = value => {\r\n        socket.emit('moveMade', {\r\n            square: value,\r\n            player,\r\n            gameId: game.id,\r\n        });\r\n    };\r\n\r\n    const getWinnerMessage = () => {\r\n        return winner.player.id === player.id ? 'You Win' : 'You Loose';\r\n    };\r\n\r\n    const turnMessage =\r\n        game.playerTurn === player.id ? 'Your Move' : 'Opponunt Turn';\r\n\r\n    const winnerMessage = winner ? getWinnerMessage() : 'Draw game';\r\n\r\n    return (\r\n        <div>\r\n            {player && (\r\n                <h5>\r\n                    Welcome {player.name}.{' '}\r\n                    <strong>You are playing {player.symbol}</strong>\r\n                </h5>\r\n            )}\r\n            {game.status === 'playing' && <h5>{turnMessage}</h5>}\r\n            {game && <h5>Game ID: {game.id}</h5>}\r\n\r\n            {game.status === 'gameOver' && (\r\n                <div className=\"alert alert-info\">{winnerMessage}</div>\r\n            )}\r\n            <hr />\r\n            <Board\r\n                player={player}\r\n                game={game}\r\n                onSquareClick={onSquareClick}\r\n                winner={winner}\r\n            />\r\n            {notification.map((msg, index) => (\r\n                <p key={index}>{msg}</p>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}